pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  securityContext:
    runAsUser: 0
  containers:
    - name: dind
      image: docker:24.0.7-dind
      securityContext:
        privileged: true
        runAsUser: 0
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
"""
            defaultContainer 'dind'
        }
    }

    environment {
        AWS_REGION    = 'ap-northeast-2'
        ECR_REPO_URI  = credentials('forever-be-dev-ecr-uri')
        ECR_REPO      = credentials('forever-be-dev-ecr')
        BRANCH_NAME   = "${env.GIT_BRANCH}".replaceAll('/', '-')
        JAVA_HOME     = "/usr/lib/jvm/java-17-openjdk"
        PATH          = "${env.JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Install Dependencies') {
            steps {
                sh '''
                    apk update
                    apk add --no-cache \
                        curl unzip git openjdk17 sudo bash coreutils binutils \
                        python3 py3-pip make cmake gcc g++ libc-dev libffi-dev openssl-dev \
                        aws-cli

                    mkdir -p ~/.docker/cli-plugins/
                    curl -SL https://github.com/docker/buildx/releases/download/v0.14.0/buildx-v0.14.0.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
                    chmod +x ~/.docker/cli-plugins/docker-buildx
                    docker buildx version

                    aws --version
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Set Build Vars') {
            steps {
                script {
                    COMMIT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    BUILD_TAG   = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}-${COMMIT_HASH}"
                    env.COMMIT_HASH = COMMIT_HASH
                    env.BUILD_TAG = BUILD_TAG
                }
            }
        }

        stage('Login to ECR') {
            steps {
                sh '''
                    aws ecr get-login-password --region $AWS_REGION | \
                    docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Gradle Build') {
            steps {
                sh './gradlew clean'
                sh './gradlew test'
                sh './gradlew build --no-daemon'
            }
        }
	
	stage('Upload Frontend to S3') {
		environment {
			AWS_REGION = 'ap-northeast-2'
			S3_BUCKET = 'www.foreveryoungoliveyoung.com'
			DIST_DIR = 'dist' // 프론트 빌드 결과 디렉토리
		}
		steps {
			sh """
			aws s3 sync ${DIST_DIR} s3://${S3_BUCKET}/ --region ${AWS_REGION} --delete
			"""
		}
	}

        stage('Docker Buildx Build & Push') {
            steps {
                sh '''
                    env | grep AWS
                    cat ~/.aws/credentials || echo "no credentials file"
                    aws sts get-caller-identity

                    # (buildx 설치 및 사용 부분 생략 가능)

                    export DOCKER_BUILDKIT=1
                    
                    docker build --push -t $ECR_REPO_URI:${BUILD_TAG} -t $ECR_REPO_URI:latest .

                    # 또는, 빌드 후 별도로 푸시하려면:
                    # docker build -t $ECR_REPO_URI:${BUILD_TAG} -t $ECR_REPO_URI:latest .
                    # docker push $ECR_REPO_URI:${BUILD_TAG}
                    # docker push $ECR_REPO_URI:latest
                '''
            }
        }
    }
}
