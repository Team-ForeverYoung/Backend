pipeline {
    agent any

    environment {
        AWS_REGION  = 'ap-northeast-2'
        ECR_REPO    = credentials('forever-be-dev-ecr-uri')
        BRANCH_NAME = "${env.GIT_BRANCH}".replaceAll('/', '-')
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    # Install AWS CLI v2 if not already installed
                    if ! command -v aws &> /dev/null; then
                        echo "Installing AWS CLI..."
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip -q awscliv2.zip
                        sudo ./aws/install
                    else
                        echo "AWS CLI already installed"
                    fi

                    # Install Docker if not already installed
                    if ! command -v docker &> /dev/null; then
                        echo "Installing Docker..."
                        sudo apt-get update -y
                        sudo apt-get install -y docker.io
                        sudo usermod -aG docker $USER
                        newgrp docker
                    else
                        echo "Docker already installed"
                    fi
                '''
            }
        }

        stage('Set Build Vars') {
            steps {
                script {
                    COMMIT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    BUILD_TAG   = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}-${COMMIT_HASH}"
                    env.COMMIT_HASH = COMMIT_HASH
                    env.BUILD_TAG = BUILD_TAG
                }
            }
        }

        stage('Login to ECR') {
            steps {
                sh '''
                    aws ecr get-login-password --region $AWS_REGION | \
                    docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Gradle Build') {
            steps {
                sh './gradlew clean'
                sh './gradlew test'
                sh './gradlew build --no-daemon'
            }
        }

        stage('Docker Build & Push') {
            steps {
                sh '''
                    docker build -t $ECR_REPO:${BUILD_TAG} .
                    docker tag $ECR_REPO:${BUILD_TAG} $ECR_REPO:latest
                    docker push $ECR_REPO:${BUILD_TAG}
                    docker push $ECR_REPO:latest
                '''
            }
        }

    }
}
