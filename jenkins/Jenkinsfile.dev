pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  securityContext:
    runAsUser: 0
  containers:
    - name: build
      image: ubuntu:22.04
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
            defaultContainer 'build'
        }
    }

    environment {
        AWS_REGION  = 'ap-northeast-2'
        ECR_REPO_URI    = credentials('forever-be-dev-ecr-uri')
        ECR_REPO = credentials('forever-be-dev-ecr')
        BRANCH_NAME = "${env.GIT_BRANCH}".replaceAll('/', '-')
        JAVA_HOME   = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH        = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Install Dependencies') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y unzip curl sudo lsb-release ca-certificates gnupg git docker.io openjdk-17-jdk
                    # Docker, buildx 설치
                    curl -fsSL https://get.docker.com | sh
                    mkdir -p ~/.docker/cli-plugins/
                    curl -SL https://github.com/docker/buildx/releases/download/v0.14.0/buildx-v0.14.0.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
                    chmod +x ~/.docker/cli-plugins/docker-buildx
                    docker buildx version

                    # AWS CLI v2 설치
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    ./aws/install

                    # ECR 로그인
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Set Build Vars') {
            steps {
                script {
                    COMMIT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    BUILD_TAG   = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}-${COMMIT_HASH}"
                    env.COMMIT_HASH = COMMIT_HASH
                    env.BUILD_TAG = BUILD_TAG
                }
            }
        }

        stage('Login to ECR') {
            steps {
                sh '''
                    aws ecr get-login-password --region $AWS_REGION | \
                    docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Gradle Build') {
            steps {
                sh './gradlew clean'
                sh './gradlew test'
                sh './gradlew build --no-daemon'
            }
        }

        stage('Docker Buildx Build & Push') {
            steps {
                sh '''
                   # 현재 AWS 인증 정보 확인
                      env | grep AWS
                      cat ~/.aws/credentials || echo "no credentials file"
                      aws sts get-caller-identity

                      # 최신 buildx 설치 (v0.14.0)
                      mkdir -p ~/.docker/cli-plugins/
                      curl -SL https://github.com/docker/buildx/releases/download/v0.14.0/buildx-v0.14.0.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
                      chmod +x ~/.docker/cli-plugins/docker-buildx
                      docker buildx version
                      export DOCKER_BUILDKIT=1
                      # 멀티플랫폼 빌드 & ECR 푸시
                      docker buildx build --platform linux/amd64,linux/arm64 --push -t $ECR_REPO_URI:${BUILD_TAG} -t $ECR_REPO_URI:latest .

                '''
            }
        }
    }
}
