pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
   containers:
     - name: docker
       image: docker:24-dind
       command: ['sleep', 'infinity']
       securityContext:
         privileged: true
       env:
         - name: DOCKER_TLS_CERTDIR
           value: ""
       volumeMounts:
         - name: docker-graph
           mountPath: /var/lib/docker
   volumes:
     - name: docker-graph
       emptyDir: {}
"""
            defaultContainer 'build'
        }
    }

    environment {
        AWS_REGION  = 'ap-northeast-2'
        ECR_REPO_URI    = credentials('forever-be-dev-ecr-uri')
        ECR_REPO = credentials('forever-be-dev-ecr')
        BRANCH_NAME = "${env.GIT_BRANCH}".replaceAll('/', '-')
        JAVA_HOME   = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH        = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Install Dependencies') {
            steps {
                sh '''
             # Alpine 패키지 설치
             apk update
             apk add --no-cache curl unzip git bash

             # (docker:24에는 이미 도커엔진, 도커 CLI, buildx가 내장되어 있습니다)
             docker version
             docker buildx version

             # AWS CLI v2 설치 (이미 설치되어 있을 수도 있으나, 최신버전 설치 예시)
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             ./aws/install || true

             # ECR 로그인
             aws --version
             aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Set Build Vars') {
            steps {
                script {
                    COMMIT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    BUILD_TAG   = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}-${COMMIT_HASH}"
                    env.COMMIT_HASH = COMMIT_HASH
                    env.BUILD_TAG = BUILD_TAG
                }
            }
        }

        stage('Login to ECR') {
            steps {
                sh '''
                    aws ecr get-login-password --region $AWS_REGION | \
                    docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Gradle Build') {
            steps {
                sh './gradlew clean'
                sh './gradlew test'
                sh './gradlew build --no-daemon'
            }
        }

        stage('Docker Buildx Build & Push') {
            steps {
                sh '''
                    # 환경/인증 정보 확인
                    env | grep AWS
                    aws sts get-caller-identity

                    # 태그 변수 세팅
                    TAG=${BUILD_TAG:-latest}

                    # 도커 빌드 및 푸시
                    docker build -t $ECR_REPO_URI:$TAG .
                    docker push $ECR_REPO_URI:$TAG
                '''
            }
        }
    }
}
